import * as React from "react";
import * as ReactDOM from "react-dom";
import { CommentForm } from "./CommentForm";
import { CommentList } from "./CommentList";
declare let $: any;

export interface CommentBoxProps { data: any, url: any, pollInterval: any }

interface AppState { data: any }

export class CommentBox extends React.Component<CommentBoxProps, AppState>{

  loadCommentsFromServer() {
    console.log(this.props);
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function (data) {
        this.setState({ data: data });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  }

  handleCommentSubmit(comment) {

    var comments = this.state.data;
    
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});

    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function (data) {
        this.setState({ data: data });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
        this.setState({data: comments});
      }.bind(this)
    });
  }


  render() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit.bind(this)} />
      </div>
    );
  }

  constructor(props: any) {
    super(props);
    this.state = { data: [] };
    this.loadCommentsFromServer();
    //https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
    setInterval(this.loadCommentsFromServer.bind(this), this.props.pollInterval);
  }

};

